
REPLICATION INSTRUCTIONS

Step 1: Set up your environment
Within the REPLICATION folder, create a Python virtual environment and install the required dependencies:

    python3 -m venv venv
    source venv/bin/activate
    pip install pandas ephem scipy tzlocal matplotlib requests

Step 2: Confirm system time
Ensure your system clock is set to local time and is automatically synced to a time server.

Step 3: Set FlowShamBo round count
Open FlowShamBo_REALTIME_RUNNER_V2.py and set the number of rounds you wish to run.
The default is 10 million rounds, which takes approximately 12 days and outputs a ~500MB CSV.

Step 4: Launch the test
Run the test using:
    python FlowShamBo_dual_launcher.py

Step 5: Retrieve output
After completion, the script will generate a file named flow.csv.

Step 6: Gather tidal data
Obtain 1-minute harmonic tide reports from your nearest tidal station.
In the U.S., use: https://tidesandcurrents.noaa.gov

Settings:
- Time Range: 3 days before and after your test window
- Units: As preferred
- Time Zone: LST/LDT
- Datum: MLLW
- Clock Format: 24 HOUR
- Data Interval: 1 minute
- Output Format: DATA ONLY

Download the file (typically named id.xml) and move it to your project folder.

Step 7: Convert tide data
Run the following to generate tide_dTide_dt.csv:
    python dTide_dt.py

Step 8: Generate moon altitude data
Edit moon_altitude.py with your lat/long and date range (3 days before/after test).
Run the script to produce moon.csv.

Step 9: Apply lunar lag
Run:
    python lunar_lag_shift_tool.py
This will calculate daily lunar lag and generate the lag-shifted file tide.csv.

ANALYSIS

Step 1: Run the main correlation analysis
    python gpct_analysis.py
- Segments tide.csv by lunar ascent/descent.
- Computes r, p, z statistics, and provides z-flip and global totals.

Step 2: Visualize correlation
    python gpct_graph_analysis.py
- Plots z-normalized FlowMeter vs. z-normalized average lunar altitude.
- Outputs correlation plots and summary.

Step 3: Sweep phase offsets
    python phase_sweep_analysis.py
- Performs a 24-hour sweep, segmenting dTide/dt into 1-hour phase windows.
- Outputs correlation for each window.
